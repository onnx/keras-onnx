# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      # No python 2.x since tf2onnx does not support it
      Python35-tf1110:
        python.version: '3.5'
        ONNX_PATH: onnx==1.2.3
        KERAS: keras==2.1.6
        TENSORFLOW_PATH: tensorflow==1.11.0
        INSTALL_ORT: pip install onnxruntime==1.1.1

      Python36-tf1150:
        python.version: '3.6'
        ONNX_PATH: onnx==1.5.0
        KERAS: keras==2.2.5
        TENSORFLOW_PATH: tensorflow==1.15.0
        INSTALL_ORT: pip install onnxruntime==1.1.1

      Python37-tf200:
        python.version: '3.7'
        ONNX_PATH: onnx==1.6.0
        KERAS: keras
        TENSORFLOW_PATH: tensorflow==2.0.0
        INSTALL_ORT:

    maxParallel: 3

  steps:
  - script: sudo install -d -m 0777 /home/vsts/.conda/envs
    displayName: Fix Conda permissions

  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      python -m pip install --upgrade pip
      conda config --set always_yes yes --set changeps1 no
      pip install $(ONNX_PATH)
      pip install h5py==2.9.0
      pip install $(TENSORFLOW_PATH)
      pip install $(KERAS)
      git clone https://github.com/microsoft/onnxconverter-common
      cd onnxconverter-common
      pip install -e .
      cd ..
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
      $(INSTALL_ORT)
    displayName: 'Install dependencies'

  - script: |
      pip install -e .
      python -c "import onnxruntime"
      python -c "import onnxconverter_common"
      pytest tests --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
